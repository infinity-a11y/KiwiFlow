---
title: "`r params$report_title`"
author: "`r params$report_author`"
date: "`r Sys.Date()`"
params:
  report_title: "Deconvolution Report"
  report_author: ""
  comment: ""
  result_path: ""
  result_file: ""
output:
  html_document:
    self_contained: true
    embed-resources: true
title-block-banner: "#27445C"
css: quarto_styles.css
format:
  html:
    smooth-scroll: true
    embed-resources: true
    other-links:
      - text: KiwiFlow Repository
        icon: github
        href: https://github.com/infinity-a11y/KiwiFlow
        target: _blank
      - text: UniDec Repository
        icon: github
        href: https://github.com/michaelmarty/UniDec
        target: _blank
      - text: Liora Bioinformatics
        href: https://www.liora-bioinformatics.com/
        target: _blank
---

````{html}
<button onclick="topFunction()" id="topBtn" class="btn btn-primary">â†‘ Back to Top</button>

<script>
  // Get the button
  let mybutton = document.getElementById("topBtn");

  // Show the button when scrolling down
  window.onscroll = function () {
    if (document.body.scrollTop > 200 || document.documentElement.scrollTop > 200) {
      mybutton.style.display = "block";
    } else {
      mybutton.style.display = "none";
    }
  };

  // Scroll to the top smoothly
  function topFunction() {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
</script>

<style>
  #topBtn {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: none;
    padding: 10px 15px;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
</style>


```{r }
#| label: List Result
#| message: false
#| warning: false
#| include: false

# Load the result list from RDS file
result <- readRDS(file.path(params$result_file))
names_result <- names(result)[!names(result) %in% c("session", "output")]
```

`r if(params$comment != "") paste("<div class='comment-text'>", params$comment, "</div> <hr>")`

### Parameter

``` {r}
#| label: Load Result
#| message: false
#| warning: false
#| include: false

# Load the result list from RDS file
config_all <- unlist(result[[1]][1])
names(config_all) <- gsub("config.", "", names(config_all))

imp_params <- names(config_all) %in% c("startz", "endz", "minmz", "maxmz", "masslb", "massub", "peakwindow", "peakthresh", "peaknorm", "massbins")

main_params <- config_all[imp_params]

config_ex_path <- config_all[!names(config_all) %in% c("input", "output")]
```


```{r echo=FALSE, results='asis'}
#| label: Parameter

main_param_table <- data.frame(
  Parameter = names(main_params),
  Value = as.character(main_params),  
  stringsAsFactors = FALSE
)

# Split main_param_table into three parts for a 6-column format
third_n_main <- ceiling(nrow(main_param_table) / 3)

main_left <- main_param_table[1:third_n_main, ]
main_middle <- main_param_table[(third_n_main + 1):(2 * third_n_main), ]
main_right <- main_param_table[(2 * third_n_main + 1):nrow(main_param_table), ]

# Pad shorter columns with empty rows
max_rows_main <- max(nrow(main_left), nrow(main_middle), nrow(main_right))

if (nrow(main_left) < max_rows_main) {
  empty_rows <- data.frame(Parameter = rep("", max_rows_main - nrow(main_left)), 
                           Value = rep("", max_rows_main - nrow(main_left)))
  main_left <- rbind(main_left, empty_rows)
}

if (nrow(main_middle) < max_rows_main) {
  empty_rows <- data.frame(Parameter = rep("", max_rows_main - nrow(main_middle)), 
                           Value = rep("", max_rows_main - nrow(main_middle)))
  main_middle <- rbind(main_middle, empty_rows)
}

if (nrow(main_right) < max_rows_main) {
  empty_rows <- data.frame(Parameter = rep("", max_rows_main - nrow(main_right)), 
                           Value = rep("", max_rows_main - nrow(main_right)))
  main_right <- rbind(main_right, empty_rows)
}

# Combine into final 6-column format for main parameters
main_param_table_wide <- cbind(main_left, main_middle, main_right)

param_table <- data.frame(
  Parameter = names(config_ex_path),
  Value = as.character(config_ex_path),  
  stringsAsFactors = FALSE
)

# Determine the third of the remaining parameters
third_n <- ceiling(nrow(param_table) / 3)

# Split into three parts for a 6-column format
param_left <- param_table[1:third_n, ]
param_middle <- param_table[(third_n + 1):(2 * third_n), ]
param_right <- param_table[(2 * third_n + 1):nrow(param_table), ]

# Pad the shorter columns with empty rows if necessary
max_rows <- max(nrow(param_left), nrow(param_middle), nrow(param_right))

if (nrow(param_left) < max_rows) {
  empty_rows <- data.frame(Parameter = rep("", max_rows - nrow(param_left)), 
                           Value = rep("", max_rows - nrow(param_left)))
  param_left <- rbind(param_left, empty_rows)
}

if (nrow(param_middle) < max_rows) {
  empty_rows <- data.frame(Parameter = rep("", max_rows - nrow(param_middle)), 
                           Value = rep("", max_rows - nrow(param_middle)))
  param_middle <- rbind(param_middle, empty_rows)
}

if (nrow(param_right) < max_rows) {
  empty_rows <- data.frame(Parameter = rep("", max_rows - nrow(param_right)), 
                           Value = rep("", max_rows - nrow(param_right)))
  param_right <- rbind(param_right, empty_rows)
}

# Combine into final table structure with 6 columns
param_table_wide <- cbind(param_left, param_middle, param_right)

# Remove column names for all tables
colnames(main_param_table_wide) <- NULL
colnames(param_table_wide) <- NULL

# Render main parameter table with no headers
main_param_tab <- knitr::kable(main_param_table_wide, booktabs = TRUE, row.names = FALSE, align = "l") |>
  kableExtra::kable_styling(full_width = TRUE, bootstrap_options = c("hover", "condensed")) |>
  kableExtra::column_spec(c(2, 4, 6), monospace = TRUE) |>
  kableExtra::kable_styling("striped")


# Create table with the updated 6 columns
other_param_tab <- knitr::kable(param_table_wide, booktabs = TRUE, row.names = FALSE, align = "l") |>
  kableExtra::kable_styling(full_width = TRUE, bootstrap_options = c("hover", "condensed")) |>
  kableExtra::column_spec(c(2, 4, 6), monospace = TRUE) |>
  kableExtra::kable_styling("striped")

# Print tables with a break in between
cat(main_param_tab)
cat("<div style='overflow-x: auto; width: 100%;'>")
cat("</div>")
cat("<br><details>  <summary>Parameter Full List</summary> ")
cat(other_param_tab)
cat("</details>")
```

------------------------------------------------------------------------

### Results

```{r echo=FALSE, results="asis"}
#| label: Heatmap

if (file.exists(file.path(params$result_path, "heatmap.rds"))) {
  heatmap <- readRDS(file.path(params$result_path, "heatmap.rds"))
  htmltools::tagList(
  htmltools::div(
    style = "max-width: 65%;",
    heatmap
  )
)
}
```

```{r echo=FALSE, results="asis"}
#| label: Sample List
#| message: false
#| warning: false

if(length(names_result) > 1) {
  # Define the number of columns
num_cols <- 2

# Generate clickable list of names in two columns with alternating row colors
table_rows <- sapply(seq(1, length(names_result), by = num_cols), function(i) {
  row_color <- ifelse((i %/% num_cols) %% 2 == 0, "#f2f2f27a", "#ffffff")  # Alternate row colors
  
  # Create cells for each column
  cells <- lapply(i:(i + num_cols - 1), function(j) {
    if (j <= length(names_result)) {
      paste0("<td><a href='#", tolower(names_result[j]), "'>", names_result[j], "</a></td>")
    } else {
      "<td></td>"  # Empty cell for uneven rows
    }
  })
  
  paste0("<tr style='background-color:", row_color, ";'>", paste(unlist(cells), collapse = ""), "</tr>")
})

# Convert table rows to a single character string with table structure
clickable_table <- paste("<table class='table table-bordered' style='width:100%; border-collapse: collapse;'>", paste(table_rows, collapse = "\n"), "</table>", sep = "\n")


cat("<br>", clickable_table)
}

```

```{r echo=FALSE, fig.height=6, fig.show='hold', fig.width=10, results='asis'}
#| label: Results
#| message: false
#| warning: false

# Function to convert ggplot to Base64 
ggplot_to_base64 <- function(plot, width = 5, height = 5, dpi = 300) {
  temp_file <- tempfile(fileext = ".png")  # Create temp file
  
  ggplot2::ggsave(temp_file, plot = plot, width = width, height = height, dpi = dpi, device = "png") 
  
  base64_data <- base64enc::dataURI(file = temp_file, mime = "image/png")  # Convert to Base64
  
  unlink(temp_file)  # Delete temp file
  
  return(base64_data)
}

# Store image sections in a list for rendering
plot_output <- list()

for (name in names_result) {
  if (!is.null(result[[name]]$decon_spec) && !is.null(result[[name]]$raw_spec)) {
    # Convert ggplots to Base64 without saving to disk
    img1_base64 <- ggplot_to_base64(result[[name]]$decon_spec)
    img2_base64 <- ggplot_to_base64(result[[name]]$raw_spec)
    
    config <- result[[name]]$config
    
    config_path <- ifelse(
      length(config$input) > 1,
      paste(config$input[1], config$input[2]),
      config$input
    )
    
    # Create a linked section header and horizontal separator
    section_html <- htmltools::tagList(
      htmltools::tags$section(
        id = tolower(name),
        class = "level4",
        htmltools::h4(
          class = "anchored",
          `data-anchor-id` = tolower(name),
          htmltools::span(class = "name-part", paste(name)),
          " ",  
          htmltools::span(class = "subtitle-part", "Deconvoluted Spectrum | Original Raw Spectrum"),
          htmltools::a(
            class = "anchorjs-link",
            `aria-label` = "Anchor",
            `data-anchorjs-icon` = "\uE84B",
            href = paste0("#", tolower(name)),
            style = "font: 1em / 1 anchorjs-icons; margin-left: 0.1875em; padding-right: 0.1875em;"
          )
        ),
        htmltools::div(
          class = "result-path",
          style = "overflow-wrap: anywhere;",
          htmltools::p(normalizePath(dirname(config_path)))
        ),
        # Side-by-side images
        htmltools::div(
          style = "display: flex;",
          htmltools::img(src = img1_base64, width = "50%"),
          htmltools::img(src = img2_base64, width = "50%")
        )
      )
    )
    
    # Append the section to the output list
    plot_output <- append(plot_output, list(section_html))
  }
}

# Force Quarto to recognize and render everything
htmltools::tagList(plot_output)
```

`r paste("<br><br>Session:<i>", paste0(Sys.Date(), "_", regmatches(
    basename(result$session[3]),
    regexpr("id\\d+", basename(result$session[3]))
)), "</i>")`

------------------------------------------------------------------------
